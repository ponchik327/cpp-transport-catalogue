// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace proto_tc {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class DistanceBetweenStops;
struct DistanceBetweenStopsDefaultTypeInternal;
extern DistanceBetweenStopsDefaultTypeInternal _DistanceBetweenStops_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace proto_tc
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_tc::Bus* Arena::CreateMaybeMessage<::proto_tc::Bus>(Arena*);
template<> ::proto_tc::Coordinates* Arena::CreateMaybeMessage<::proto_tc::Coordinates>(Arena*);
template<> ::proto_tc::DistanceBetweenStops* Arena::CreateMaybeMessage<::proto_tc::DistanceBetweenStops>(Arena*);
template<> ::proto_tc::Stop* Arena::CreateMaybeMessage<::proto_tc::Stop>(Arena*);
template<> ::proto_tc::TransportCatalogue* Arena::CreateMaybeMessage<::proto_tc::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_tc {

// ===================================================================

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_tc.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit PROTOBUF_CONSTEXPR Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coordinates& from) {
    Coordinates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_tc.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto_tc.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double lat_;
    double lng_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_tc.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_tc.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCordFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto_tc.Coordinates cord = 2;
  bool has_cord() const;
  private:
  bool _internal_has_cord() const;
  public:
  void clear_cord();
  const ::proto_tc::Coordinates& cord() const;
  PROTOBUF_NODISCARD ::proto_tc::Coordinates* release_cord();
  ::proto_tc::Coordinates* mutable_cord();
  void set_allocated_cord(::proto_tc::Coordinates* cord);
  private:
  const ::proto_tc::Coordinates& _internal_cord() const;
  ::proto_tc::Coordinates* _internal_mutable_cord();
  public:
  void unsafe_arena_set_allocated_cord(
      ::proto_tc::Coordinates* cord);
  ::proto_tc::Coordinates* unsafe_arena_release_cord();

  // uint32 id = 3;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_tc.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto_tc::Coordinates* cord_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_tc.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_tc.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdStopFieldNumber = 3,
    kNameFieldNumber = 1,
    kIsCircularFieldNumber = 2,
  };
  // repeated uint32 id_stop = 3;
  int id_stop_size() const;
  private:
  int _internal_id_stop_size() const;
  public:
  void clear_id_stop();
  private:
  uint32_t _internal_id_stop(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_id_stop() const;
  void _internal_add_id_stop(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_id_stop();
  public:
  uint32_t id_stop(int index) const;
  void set_id_stop(int index, uint32_t value);
  void add_id_stop(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      id_stop() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_id_stop();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_circular = 2;
  void clear_is_circular();
  bool is_circular() const;
  void set_is_circular(bool value);
  private:
  bool _internal_is_circular() const;
  void _internal_set_is_circular(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto_tc.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > id_stop_;
    mutable std::atomic<int> _id_stop_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool is_circular_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class DistanceBetweenStops final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_tc.DistanceBetweenStops) */ {
 public:
  inline DistanceBetweenStops() : DistanceBetweenStops(nullptr) {}
  ~DistanceBetweenStops() override;
  explicit PROTOBUF_CONSTEXPR DistanceBetweenStops(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistanceBetweenStops(const DistanceBetweenStops& from);
  DistanceBetweenStops(DistanceBetweenStops&& from) noexcept
    : DistanceBetweenStops() {
    *this = ::std::move(from);
  }

  inline DistanceBetweenStops& operator=(const DistanceBetweenStops& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceBetweenStops& operator=(DistanceBetweenStops&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistanceBetweenStops& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistanceBetweenStops* internal_default_instance() {
    return reinterpret_cast<const DistanceBetweenStops*>(
               &_DistanceBetweenStops_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DistanceBetweenStops& a, DistanceBetweenStops& b) {
    a.Swap(&b);
  }
  inline void Swap(DistanceBetweenStops* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistanceBetweenStops* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistanceBetweenStops* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistanceBetweenStops>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistanceBetweenStops& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DistanceBetweenStops& from) {
    DistanceBetweenStops::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceBetweenStops* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_tc.DistanceBetweenStops";
  }
  protected:
  explicit DistanceBetweenStops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFromFieldNumber = 1,
    kIdToFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // int32 id_from = 1;
  void clear_id_from();
  int32_t id_from() const;
  void set_id_from(int32_t value);
  private:
  int32_t _internal_id_from() const;
  void _internal_set_id_from(int32_t value);
  public:

  // int32 id_to = 2;
  void clear_id_to();
  int32_t id_to() const;
  void set_id_to(int32_t value);
  private:
  int32_t _internal_id_to() const;
  void _internal_set_id_to(int32_t value);
  public:

  // int32 distance = 3;
  void clear_distance();
  int32_t distance() const;
  void set_distance(int32_t value);
  private:
  int32_t _internal_distance() const;
  void _internal_set_distance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_tc.DistanceBetweenStops)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_from_;
    int32_t id_to_;
    int32_t distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_tc.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_tc.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopFieldNumber = 1,
    kBusFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // repeated .proto_tc.Stop stop = 1;
  int stop_size() const;
  private:
  int _internal_stop_size() const;
  public:
  void clear_stop();
  ::proto_tc::Stop* mutable_stop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::Stop >*
      mutable_stop();
  private:
  const ::proto_tc::Stop& _internal_stop(int index) const;
  ::proto_tc::Stop* _internal_add_stop();
  public:
  const ::proto_tc::Stop& stop(int index) const;
  ::proto_tc::Stop* add_stop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::Stop >&
      stop() const;

  // repeated .proto_tc.Bus bus = 2;
  int bus_size() const;
  private:
  int _internal_bus_size() const;
  public:
  void clear_bus();
  ::proto_tc::Bus* mutable_bus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::Bus >*
      mutable_bus();
  private:
  const ::proto_tc::Bus& _internal_bus(int index) const;
  ::proto_tc::Bus* _internal_add_bus();
  public:
  const ::proto_tc::Bus& bus(int index) const;
  ::proto_tc::Bus* add_bus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::Bus >&
      bus() const;

  // repeated .proto_tc.DistanceBetweenStops distance = 3;
  int distance_size() const;
  private:
  int _internal_distance_size() const;
  public:
  void clear_distance();
  ::proto_tc::DistanceBetweenStops* mutable_distance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::DistanceBetweenStops >*
      mutable_distance();
  private:
  const ::proto_tc::DistanceBetweenStops& _internal_distance(int index) const;
  ::proto_tc::DistanceBetweenStops* _internal_add_distance();
  public:
  const ::proto_tc::DistanceBetweenStops& distance(int index) const;
  ::proto_tc::DistanceBetweenStops* add_distance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::DistanceBetweenStops >&
      distance() const;

  // @@protoc_insertion_point(class_scope:proto_tc.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::Stop > stop_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::Bus > bus_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::DistanceBetweenStops > distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double lat = 1;
inline void Coordinates::clear_lat() {
  _impl_.lat_ = 0;
}
inline double Coordinates::_internal_lat() const {
  return _impl_.lat_;
}
inline double Coordinates::lat() const {
  // @@protoc_insertion_point(field_get:proto_tc.Coordinates.lat)
  return _internal_lat();
}
inline void Coordinates::_internal_set_lat(double value) {
  
  _impl_.lat_ = value;
}
inline void Coordinates::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:proto_tc.Coordinates.lat)
}

// double lng = 2;
inline void Coordinates::clear_lng() {
  _impl_.lng_ = 0;
}
inline double Coordinates::_internal_lng() const {
  return _impl_.lng_;
}
inline double Coordinates::lng() const {
  // @@protoc_insertion_point(field_get:proto_tc.Coordinates.lng)
  return _internal_lng();
}
inline void Coordinates::_internal_set_lng(double value) {
  
  _impl_.lng_ = value;
}
inline void Coordinates::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:proto_tc.Coordinates.lng)
}

// -------------------------------------------------------------------

// Stop

// string name = 1;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:proto_tc.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_tc.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto_tc.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:proto_tc.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_tc.Stop.name)
}

// .proto_tc.Coordinates cord = 2;
inline bool Stop::_internal_has_cord() const {
  return this != internal_default_instance() && _impl_.cord_ != nullptr;
}
inline bool Stop::has_cord() const {
  return _internal_has_cord();
}
inline void Stop::clear_cord() {
  if (GetArenaForAllocation() == nullptr && _impl_.cord_ != nullptr) {
    delete _impl_.cord_;
  }
  _impl_.cord_ = nullptr;
}
inline const ::proto_tc::Coordinates& Stop::_internal_cord() const {
  const ::proto_tc::Coordinates* p = _impl_.cord_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_tc::Coordinates&>(
      ::proto_tc::_Coordinates_default_instance_);
}
inline const ::proto_tc::Coordinates& Stop::cord() const {
  // @@protoc_insertion_point(field_get:proto_tc.Stop.cord)
  return _internal_cord();
}
inline void Stop::unsafe_arena_set_allocated_cord(
    ::proto_tc::Coordinates* cord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cord_);
  }
  _impl_.cord_ = cord;
  if (cord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_tc.Stop.cord)
}
inline ::proto_tc::Coordinates* Stop::release_cord() {
  
  ::proto_tc::Coordinates* temp = _impl_.cord_;
  _impl_.cord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_tc::Coordinates* Stop::unsafe_arena_release_cord() {
  // @@protoc_insertion_point(field_release:proto_tc.Stop.cord)
  
  ::proto_tc::Coordinates* temp = _impl_.cord_;
  _impl_.cord_ = nullptr;
  return temp;
}
inline ::proto_tc::Coordinates* Stop::_internal_mutable_cord() {
  
  if (_impl_.cord_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_tc::Coordinates>(GetArenaForAllocation());
    _impl_.cord_ = p;
  }
  return _impl_.cord_;
}
inline ::proto_tc::Coordinates* Stop::mutable_cord() {
  ::proto_tc::Coordinates* _msg = _internal_mutable_cord();
  // @@protoc_insertion_point(field_mutable:proto_tc.Stop.cord)
  return _msg;
}
inline void Stop::set_allocated_cord(::proto_tc::Coordinates* cord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cord_;
  }
  if (cord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cord);
    if (message_arena != submessage_arena) {
      cord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cord, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cord_ = cord;
  // @@protoc_insertion_point(field_set_allocated:proto_tc.Stop.cord)
}

// uint32 id = 3;
inline void Stop::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Stop::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Stop::id() const {
  // @@protoc_insertion_point(field_get:proto_tc.Stop.id)
  return _internal_id();
}
inline void Stop::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Stop::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto_tc.Stop.id)
}

// -------------------------------------------------------------------

// Bus

// string name = 1;
inline void Bus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:proto_tc.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_tc.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto_tc.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:proto_tc.Bus.name)
  return _impl_.name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_tc.Bus.name)
}

// bool is_circular = 2;
inline void Bus::clear_is_circular() {
  _impl_.is_circular_ = false;
}
inline bool Bus::_internal_is_circular() const {
  return _impl_.is_circular_;
}
inline bool Bus::is_circular() const {
  // @@protoc_insertion_point(field_get:proto_tc.Bus.is_circular)
  return _internal_is_circular();
}
inline void Bus::_internal_set_is_circular(bool value) {
  
  _impl_.is_circular_ = value;
}
inline void Bus::set_is_circular(bool value) {
  _internal_set_is_circular(value);
  // @@protoc_insertion_point(field_set:proto_tc.Bus.is_circular)
}

// repeated uint32 id_stop = 3;
inline int Bus::_internal_id_stop_size() const {
  return _impl_.id_stop_.size();
}
inline int Bus::id_stop_size() const {
  return _internal_id_stop_size();
}
inline void Bus::clear_id_stop() {
  _impl_.id_stop_.Clear();
}
inline uint32_t Bus::_internal_id_stop(int index) const {
  return _impl_.id_stop_.Get(index);
}
inline uint32_t Bus::id_stop(int index) const {
  // @@protoc_insertion_point(field_get:proto_tc.Bus.id_stop)
  return _internal_id_stop(index);
}
inline void Bus::set_id_stop(int index, uint32_t value) {
  _impl_.id_stop_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_tc.Bus.id_stop)
}
inline void Bus::_internal_add_id_stop(uint32_t value) {
  _impl_.id_stop_.Add(value);
}
inline void Bus::add_id_stop(uint32_t value) {
  _internal_add_id_stop(value);
  // @@protoc_insertion_point(field_add:proto_tc.Bus.id_stop)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::_internal_id_stop() const {
  return _impl_.id_stop_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::id_stop() const {
  // @@protoc_insertion_point(field_list:proto_tc.Bus.id_stop)
  return _internal_id_stop();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::_internal_mutable_id_stop() {
  return &_impl_.id_stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::mutable_id_stop() {
  // @@protoc_insertion_point(field_mutable_list:proto_tc.Bus.id_stop)
  return _internal_mutable_id_stop();
}

// -------------------------------------------------------------------

// DistanceBetweenStops

// int32 id_from = 1;
inline void DistanceBetweenStops::clear_id_from() {
  _impl_.id_from_ = 0;
}
inline int32_t DistanceBetweenStops::_internal_id_from() const {
  return _impl_.id_from_;
}
inline int32_t DistanceBetweenStops::id_from() const {
  // @@protoc_insertion_point(field_get:proto_tc.DistanceBetweenStops.id_from)
  return _internal_id_from();
}
inline void DistanceBetweenStops::_internal_set_id_from(int32_t value) {
  
  _impl_.id_from_ = value;
}
inline void DistanceBetweenStops::set_id_from(int32_t value) {
  _internal_set_id_from(value);
  // @@protoc_insertion_point(field_set:proto_tc.DistanceBetweenStops.id_from)
}

// int32 id_to = 2;
inline void DistanceBetweenStops::clear_id_to() {
  _impl_.id_to_ = 0;
}
inline int32_t DistanceBetweenStops::_internal_id_to() const {
  return _impl_.id_to_;
}
inline int32_t DistanceBetweenStops::id_to() const {
  // @@protoc_insertion_point(field_get:proto_tc.DistanceBetweenStops.id_to)
  return _internal_id_to();
}
inline void DistanceBetweenStops::_internal_set_id_to(int32_t value) {
  
  _impl_.id_to_ = value;
}
inline void DistanceBetweenStops::set_id_to(int32_t value) {
  _internal_set_id_to(value);
  // @@protoc_insertion_point(field_set:proto_tc.DistanceBetweenStops.id_to)
}

// int32 distance = 3;
inline void DistanceBetweenStops::clear_distance() {
  _impl_.distance_ = 0;
}
inline int32_t DistanceBetweenStops::_internal_distance() const {
  return _impl_.distance_;
}
inline int32_t DistanceBetweenStops::distance() const {
  // @@protoc_insertion_point(field_get:proto_tc.DistanceBetweenStops.distance)
  return _internal_distance();
}
inline void DistanceBetweenStops::_internal_set_distance(int32_t value) {
  
  _impl_.distance_ = value;
}
inline void DistanceBetweenStops::set_distance(int32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:proto_tc.DistanceBetweenStops.distance)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .proto_tc.Stop stop = 1;
inline int TransportCatalogue::_internal_stop_size() const {
  return _impl_.stop_.size();
}
inline int TransportCatalogue::stop_size() const {
  return _internal_stop_size();
}
inline void TransportCatalogue::clear_stop() {
  _impl_.stop_.Clear();
}
inline ::proto_tc::Stop* TransportCatalogue::mutable_stop(int index) {
  // @@protoc_insertion_point(field_mutable:proto_tc.TransportCatalogue.stop)
  return _impl_.stop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::Stop >*
TransportCatalogue::mutable_stop() {
  // @@protoc_insertion_point(field_mutable_list:proto_tc.TransportCatalogue.stop)
  return &_impl_.stop_;
}
inline const ::proto_tc::Stop& TransportCatalogue::_internal_stop(int index) const {
  return _impl_.stop_.Get(index);
}
inline const ::proto_tc::Stop& TransportCatalogue::stop(int index) const {
  // @@protoc_insertion_point(field_get:proto_tc.TransportCatalogue.stop)
  return _internal_stop(index);
}
inline ::proto_tc::Stop* TransportCatalogue::_internal_add_stop() {
  return _impl_.stop_.Add();
}
inline ::proto_tc::Stop* TransportCatalogue::add_stop() {
  ::proto_tc::Stop* _add = _internal_add_stop();
  // @@protoc_insertion_point(field_add:proto_tc.TransportCatalogue.stop)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::Stop >&
TransportCatalogue::stop() const {
  // @@protoc_insertion_point(field_list:proto_tc.TransportCatalogue.stop)
  return _impl_.stop_;
}

// repeated .proto_tc.Bus bus = 2;
inline int TransportCatalogue::_internal_bus_size() const {
  return _impl_.bus_.size();
}
inline int TransportCatalogue::bus_size() const {
  return _internal_bus_size();
}
inline void TransportCatalogue::clear_bus() {
  _impl_.bus_.Clear();
}
inline ::proto_tc::Bus* TransportCatalogue::mutable_bus(int index) {
  // @@protoc_insertion_point(field_mutable:proto_tc.TransportCatalogue.bus)
  return _impl_.bus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::Bus >*
TransportCatalogue::mutable_bus() {
  // @@protoc_insertion_point(field_mutable_list:proto_tc.TransportCatalogue.bus)
  return &_impl_.bus_;
}
inline const ::proto_tc::Bus& TransportCatalogue::_internal_bus(int index) const {
  return _impl_.bus_.Get(index);
}
inline const ::proto_tc::Bus& TransportCatalogue::bus(int index) const {
  // @@protoc_insertion_point(field_get:proto_tc.TransportCatalogue.bus)
  return _internal_bus(index);
}
inline ::proto_tc::Bus* TransportCatalogue::_internal_add_bus() {
  return _impl_.bus_.Add();
}
inline ::proto_tc::Bus* TransportCatalogue::add_bus() {
  ::proto_tc::Bus* _add = _internal_add_bus();
  // @@protoc_insertion_point(field_add:proto_tc.TransportCatalogue.bus)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::Bus >&
TransportCatalogue::bus() const {
  // @@protoc_insertion_point(field_list:proto_tc.TransportCatalogue.bus)
  return _impl_.bus_;
}

// repeated .proto_tc.DistanceBetweenStops distance = 3;
inline int TransportCatalogue::_internal_distance_size() const {
  return _impl_.distance_.size();
}
inline int TransportCatalogue::distance_size() const {
  return _internal_distance_size();
}
inline void TransportCatalogue::clear_distance() {
  _impl_.distance_.Clear();
}
inline ::proto_tc::DistanceBetweenStops* TransportCatalogue::mutable_distance(int index) {
  // @@protoc_insertion_point(field_mutable:proto_tc.TransportCatalogue.distance)
  return _impl_.distance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::DistanceBetweenStops >*
TransportCatalogue::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_list:proto_tc.TransportCatalogue.distance)
  return &_impl_.distance_;
}
inline const ::proto_tc::DistanceBetweenStops& TransportCatalogue::_internal_distance(int index) const {
  return _impl_.distance_.Get(index);
}
inline const ::proto_tc::DistanceBetweenStops& TransportCatalogue::distance(int index) const {
  // @@protoc_insertion_point(field_get:proto_tc.TransportCatalogue.distance)
  return _internal_distance(index);
}
inline ::proto_tc::DistanceBetweenStops* TransportCatalogue::_internal_add_distance() {
  return _impl_.distance_.Add();
}
inline ::proto_tc::DistanceBetweenStops* TransportCatalogue::add_distance() {
  ::proto_tc::DistanceBetweenStops* _add = _internal_add_distance();
  // @@protoc_insertion_point(field_add:proto_tc.TransportCatalogue.distance)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_tc::DistanceBetweenStops >&
TransportCatalogue::distance() const {
  // @@protoc_insertion_point(field_list:proto_tc.TransportCatalogue.distance)
  return _impl_.distance_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_tc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
