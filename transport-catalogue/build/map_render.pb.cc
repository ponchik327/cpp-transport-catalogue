// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_render.proto

#include "map_render.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto_render {
PROTOBUF_CONSTEXPR Label::Label(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.offset_)*/nullptr
  , /*decltype(_impl_.font_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LabelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelDefaultTypeInternal() {}
  union {
    Label _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelDefaultTypeInternal _Label_default_instance_;
PROTOBUF_CONSTEXPR Screen::Screen(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.padding_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScreenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScreenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScreenDefaultTypeInternal() {}
  union {
    Screen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScreenDefaultTypeInternal _Screen_default_instance_;
PROTOBUF_CONSTEXPR UnderLayer::UnderLayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnderLayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnderLayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnderLayerDefaultTypeInternal() {}
  union {
    UnderLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnderLayerDefaultTypeInternal _UnderLayer_default_instance_;
PROTOBUF_CONSTEXPR MapRender::MapRender(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.color_palette_)*/{}
  , /*decltype(_impl_.screen_)*/nullptr
  , /*decltype(_impl_.bus_)*/nullptr
  , /*decltype(_impl_.stop_)*/nullptr
  , /*decltype(_impl_.background_)*/nullptr
  , /*decltype(_impl_.stop_radius_)*/0
  , /*decltype(_impl_.line_width_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapRenderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapRenderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapRenderDefaultTypeInternal() {}
  union {
    MapRender _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapRenderDefaultTypeInternal _MapRender_default_instance_;
}  // namespace proto_render
static ::_pb::Metadata file_level_metadata_map_5frender_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_map_5frender_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_map_5frender_2eproto = nullptr;

const uint32_t TableStruct_map_5frender_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_render::Label, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_render::Label, _impl_.font_size_),
  PROTOBUF_FIELD_OFFSET(::proto_render::Label, _impl_.offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_render::Screen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_render::Screen, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::proto_render::Screen, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::proto_render::Screen, _impl_.padding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_render::UnderLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_render::UnderLayer, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::proto_render::UnderLayer, _impl_.width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_render::MapRender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_render::MapRender, _impl_.screen_),
  PROTOBUF_FIELD_OFFSET(::proto_render::MapRender, _impl_.stop_radius_),
  PROTOBUF_FIELD_OFFSET(::proto_render::MapRender, _impl_.line_width_),
  PROTOBUF_FIELD_OFFSET(::proto_render::MapRender, _impl_.bus_),
  PROTOBUF_FIELD_OFFSET(::proto_render::MapRender, _impl_.stop_),
  PROTOBUF_FIELD_OFFSET(::proto_render::MapRender, _impl_.background_),
  PROTOBUF_FIELD_OFFSET(::proto_render::MapRender, _impl_.color_palette_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto_render::Label)},
  { 8, -1, -1, sizeof(::proto_render::Screen)},
  { 17, -1, -1, sizeof(::proto_render::UnderLayer)},
  { 25, -1, -1, sizeof(::proto_render::MapRender)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto_render::_Label_default_instance_._instance,
  &::proto_render::_Screen_default_instance_._instance,
  &::proto_render::_UnderLayer_default_instance_._instance,
  &::proto_render::_MapRender_default_instance_._instance,
};

const char descriptor_table_protodef_map_5frender_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020map_render.proto\022\014proto_render\032\tsvg.pr"
  "oto\"\?\n\005Label\022\021\n\tfont_size\030\001 \001(\r\022#\n\006offse"
  "t\030\002 \001(\0132\023.proto_render.Point\"8\n\006Screen\022\r"
  "\n\005width\030\001 \001(\001\022\016\n\006height\030\002 \001(\001\022\017\n\007padding"
  "\030\003 \001(\001\"\?\n\nUnderLayer\022\"\n\005color\030\001 \001(\0132\023.pr"
  "oto_render.Color\022\r\n\005width\030\002 \001(\001\"\371\001\n\tMapR"
  "ender\022$\n\006screen\030\001 \001(\0132\024.proto_render.Scr"
  "een\022\023\n\013stop_radius\030\002 \001(\001\022\022\n\nline_width\030\003"
  " \001(\001\022 \n\003bus\030\004 \001(\0132\023.proto_render.Label\022!"
  "\n\004stop\030\005 \001(\0132\023.proto_render.Label\022,\n\nbac"
  "kground\030\006 \001(\0132\030.proto_render.UnderLayer\022"
  "*\n\rcolor_palette\030\007 \003(\0132\023.proto_render.Co"
  "lorb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_map_5frender_2eproto_deps[1] = {
  &::descriptor_table_svg_2eproto,
};
static ::_pbi::once_flag descriptor_table_map_5frender_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_map_5frender_2eproto = {
    false, false, 491, descriptor_table_protodef_map_5frender_2eproto,
    "map_render.proto",
    &descriptor_table_map_5frender_2eproto_once, descriptor_table_map_5frender_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_map_5frender_2eproto::offsets,
    file_level_metadata_map_5frender_2eproto, file_level_enum_descriptors_map_5frender_2eproto,
    file_level_service_descriptors_map_5frender_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_map_5frender_2eproto_getter() {
  return &descriptor_table_map_5frender_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_map_5frender_2eproto(&descriptor_table_map_5frender_2eproto);
namespace proto_render {

// ===================================================================

class Label::_Internal {
 public:
  static const ::proto_render::Point& offset(const Label* msg);
};

const ::proto_render::Point&
Label::_Internal::offset(const Label* msg) {
  return *msg->_impl_.offset_;
}
void Label::clear_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.offset_ != nullptr) {
    delete _impl_.offset_;
  }
  _impl_.offset_ = nullptr;
}
Label::Label(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_render.Label)
}
Label::Label(const Label& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Label* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){nullptr}
    , decltype(_impl_.font_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offset()) {
    _this->_impl_.offset_ = new ::proto_render::Point(*from._impl_.offset_);
  }
  _this->_impl_.font_size_ = from._impl_.font_size_;
  // @@protoc_insertion_point(copy_constructor:proto_render.Label)
}

inline void Label::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){nullptr}
    , decltype(_impl_.font_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:proto_render.Label)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Label::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.offset_;
}

void Label::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_render.Label)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.offset_ != nullptr) {
    delete _impl_.offset_;
  }
  _impl_.offset_ = nullptr;
  _impl_.font_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Label::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 font_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_render.Point offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Label::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_render.Label)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 font_size = 1;
  if (this->_internal_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_font_size(), target);
  }

  // .proto_render.Point offset = 2;
  if (this->_internal_has_offset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::offset(this),
        _Internal::offset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_render.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_render.Label)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_render.Point offset = 2;
  if (this->_internal_has_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offset_);
  }

  // uint32 font_size = 1;
  if (this->_internal_font_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_font_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Label::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Label::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Label::GetClassData() const { return &_class_data_; }


void Label::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Label*>(&to_msg);
  auto& from = static_cast<const Label&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_render.Label)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_offset()) {
    _this->_internal_mutable_offset()->::proto_render::Point::MergeFrom(
        from._internal_offset());
  }
  if (from._internal_font_size() != 0) {
    _this->_internal_set_font_size(from._internal_font_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_render.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::InternalSwap(Label* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Label, _impl_.font_size_)
      + sizeof(Label::_impl_.font_size_)
      - PROTOBUF_FIELD_OFFSET(Label, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Label::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_map_5frender_2eproto_getter, &descriptor_table_map_5frender_2eproto_once,
      file_level_metadata_map_5frender_2eproto[0]);
}

// ===================================================================

class Screen::_Internal {
 public:
};

Screen::Screen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_render.Screen)
}
Screen::Screen(const Screen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Screen* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.padding_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.padding_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.padding_));
  // @@protoc_insertion_point(copy_constructor:proto_render.Screen)
}

inline void Screen::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.padding_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Screen::~Screen() {
  // @@protoc_insertion_point(destructor:proto_render.Screen)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Screen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Screen::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Screen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_render.Screen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.padding_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.padding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Screen::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Screen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_render.Screen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_width(), target);
  }

  // double height = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_height(), target);
  }

  // double padding = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_padding = this->_internal_padding();
  uint64_t raw_padding;
  memcpy(&raw_padding, &tmp_padding, sizeof(tmp_padding));
  if (raw_padding != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_padding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_render.Screen)
  return target;
}

size_t Screen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_render.Screen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double width = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 8;
  }

  // double height = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 8;
  }

  // double padding = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_padding = this->_internal_padding();
  uint64_t raw_padding;
  memcpy(&raw_padding, &tmp_padding, sizeof(tmp_padding));
  if (raw_padding != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Screen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Screen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Screen::GetClassData() const { return &_class_data_; }


void Screen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Screen*>(&to_msg);
  auto& from = static_cast<const Screen&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_render.Screen)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = from._internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_padding = from._internal_padding();
  uint64_t raw_padding;
  memcpy(&raw_padding, &tmp_padding, sizeof(tmp_padding));
  if (raw_padding != 0) {
    _this->_internal_set_padding(from._internal_padding());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Screen::CopyFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_render.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screen::IsInitialized() const {
  return true;
}

void Screen::InternalSwap(Screen* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Screen, _impl_.padding_)
      + sizeof(Screen::_impl_.padding_)
      - PROTOBUF_FIELD_OFFSET(Screen, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Screen::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_map_5frender_2eproto_getter, &descriptor_table_map_5frender_2eproto_once,
      file_level_metadata_map_5frender_2eproto[1]);
}

// ===================================================================

class UnderLayer::_Internal {
 public:
  static const ::proto_render::Color& color(const UnderLayer* msg);
};

const ::proto_render::Color&
UnderLayer::_Internal::color(const UnderLayer* msg) {
  return *msg->_impl_.color_;
}
void UnderLayer::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
UnderLayer::UnderLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_render.UnderLayer)
}
UnderLayer::UnderLayer(const UnderLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnderLayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.color_){nullptr}
    , decltype(_impl_.width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::proto_render::Color(*from._impl_.color_);
  }
  _this->_impl_.width_ = from._impl_.width_;
  // @@protoc_insertion_point(copy_constructor:proto_render.UnderLayer)
}

inline void UnderLayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.color_){nullptr}
    , decltype(_impl_.width_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnderLayer::~UnderLayer() {
  // @@protoc_insertion_point(destructor:proto_render.UnderLayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnderLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.color_;
}

void UnderLayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnderLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_render.UnderLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
  _impl_.width_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderLayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_render.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_render.UnderLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_render.Color color = 1;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // double width = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_render.UnderLayer)
  return target;
}

size_t UnderLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_render.UnderLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_render.Color color = 1;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  // double width = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnderLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderLayer::GetClassData() const { return &_class_data_; }


void UnderLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnderLayer*>(&to_msg);
  auto& from = static_cast<const UnderLayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_render.UnderLayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::proto_render::Color::MergeFrom(
        from._internal_color());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderLayer::CopyFrom(const UnderLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_render.UnderLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderLayer::IsInitialized() const {
  return true;
}

void UnderLayer::InternalSwap(UnderLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnderLayer, _impl_.width_)
      + sizeof(UnderLayer::_impl_.width_)
      - PROTOBUF_FIELD_OFFSET(UnderLayer, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderLayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_map_5frender_2eproto_getter, &descriptor_table_map_5frender_2eproto_once,
      file_level_metadata_map_5frender_2eproto[2]);
}

// ===================================================================

class MapRender::_Internal {
 public:
  static const ::proto_render::Screen& screen(const MapRender* msg);
  static const ::proto_render::Label& bus(const MapRender* msg);
  static const ::proto_render::Label& stop(const MapRender* msg);
  static const ::proto_render::UnderLayer& background(const MapRender* msg);
};

const ::proto_render::Screen&
MapRender::_Internal::screen(const MapRender* msg) {
  return *msg->_impl_.screen_;
}
const ::proto_render::Label&
MapRender::_Internal::bus(const MapRender* msg) {
  return *msg->_impl_.bus_;
}
const ::proto_render::Label&
MapRender::_Internal::stop(const MapRender* msg) {
  return *msg->_impl_.stop_;
}
const ::proto_render::UnderLayer&
MapRender::_Internal::background(const MapRender* msg) {
  return *msg->_impl_.background_;
}
void MapRender::clear_color_palette() {
  _impl_.color_palette_.Clear();
}
MapRender::MapRender(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_render.MapRender)
}
MapRender::MapRender(const MapRender& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapRender* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.color_palette_){from._impl_.color_palette_}
    , decltype(_impl_.screen_){nullptr}
    , decltype(_impl_.bus_){nullptr}
    , decltype(_impl_.stop_){nullptr}
    , decltype(_impl_.background_){nullptr}
    , decltype(_impl_.stop_radius_){}
    , decltype(_impl_.line_width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_screen()) {
    _this->_impl_.screen_ = new ::proto_render::Screen(*from._impl_.screen_);
  }
  if (from._internal_has_bus()) {
    _this->_impl_.bus_ = new ::proto_render::Label(*from._impl_.bus_);
  }
  if (from._internal_has_stop()) {
    _this->_impl_.stop_ = new ::proto_render::Label(*from._impl_.stop_);
  }
  if (from._internal_has_background()) {
    _this->_impl_.background_ = new ::proto_render::UnderLayer(*from._impl_.background_);
  }
  ::memcpy(&_impl_.stop_radius_, &from._impl_.stop_radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.line_width_) -
    reinterpret_cast<char*>(&_impl_.stop_radius_)) + sizeof(_impl_.line_width_));
  // @@protoc_insertion_point(copy_constructor:proto_render.MapRender)
}

inline void MapRender::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.color_palette_){arena}
    , decltype(_impl_.screen_){nullptr}
    , decltype(_impl_.bus_){nullptr}
    , decltype(_impl_.stop_){nullptr}
    , decltype(_impl_.background_){nullptr}
    , decltype(_impl_.stop_radius_){0}
    , decltype(_impl_.line_width_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapRender::~MapRender() {
  // @@protoc_insertion_point(destructor:proto_render.MapRender)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapRender::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.color_palette_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.screen_;
  if (this != internal_default_instance()) delete _impl_.bus_;
  if (this != internal_default_instance()) delete _impl_.stop_;
  if (this != internal_default_instance()) delete _impl_.background_;
}

void MapRender::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapRender::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_render.MapRender)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_palette_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.screen_ != nullptr) {
    delete _impl_.screen_;
  }
  _impl_.screen_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bus_ != nullptr) {
    delete _impl_.bus_;
  }
  _impl_.bus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stop_ != nullptr) {
    delete _impl_.stop_;
  }
  _impl_.stop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.background_ != nullptr) {
    delete _impl_.background_;
  }
  _impl_.background_ = nullptr;
  ::memset(&_impl_.stop_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.line_width_) -
      reinterpret_cast<char*>(&_impl_.stop_radius_)) + sizeof(_impl_.line_width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapRender::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_render.Screen screen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double stop_radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.stop_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double line_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .proto_render.Label bus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_render.Label stop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_render.UnderLayer background = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_render.Color color_palette = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_color_palette(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapRender::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_render.MapRender)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_render.Screen screen = 1;
  if (this->_internal_has_screen()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::screen(this),
        _Internal::screen(this).GetCachedSize(), target, stream);
  }

  // double stop_radius = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_radius = this->_internal_stop_radius();
  uint64_t raw_stop_radius;
  memcpy(&raw_stop_radius, &tmp_stop_radius, sizeof(tmp_stop_radius));
  if (raw_stop_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop_radius(), target);
  }

  // double line_width = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_width = this->_internal_line_width();
  uint64_t raw_line_width;
  memcpy(&raw_line_width, &tmp_line_width, sizeof(tmp_line_width));
  if (raw_line_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_line_width(), target);
  }

  // .proto_render.Label bus = 4;
  if (this->_internal_has_bus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::bus(this),
        _Internal::bus(this).GetCachedSize(), target, stream);
  }

  // .proto_render.Label stop = 5;
  if (this->_internal_has_stop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stop(this),
        _Internal::stop(this).GetCachedSize(), target, stream);
  }

  // .proto_render.UnderLayer background = 6;
  if (this->_internal_has_background()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::background(this),
        _Internal::background(this).GetCachedSize(), target, stream);
  }

  // repeated .proto_render.Color color_palette = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_color_palette_size()); i < n; i++) {
    const auto& repfield = this->_internal_color_palette(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_render.MapRender)
  return target;
}

size_t MapRender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_render.MapRender)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto_render.Color color_palette = 7;
  total_size += 1UL * this->_internal_color_palette_size();
  for (const auto& msg : this->_impl_.color_palette_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto_render.Screen screen = 1;
  if (this->_internal_has_screen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.screen_);
  }

  // .proto_render.Label bus = 4;
  if (this->_internal_has_bus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bus_);
  }

  // .proto_render.Label stop = 5;
  if (this->_internal_has_stop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stop_);
  }

  // .proto_render.UnderLayer background = 6;
  if (this->_internal_has_background()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.background_);
  }

  // double stop_radius = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_radius = this->_internal_stop_radius();
  uint64_t raw_stop_radius;
  memcpy(&raw_stop_radius, &tmp_stop_radius, sizeof(tmp_stop_radius));
  if (raw_stop_radius != 0) {
    total_size += 1 + 8;
  }

  // double line_width = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_width = this->_internal_line_width();
  uint64_t raw_line_width;
  memcpy(&raw_line_width, &tmp_line_width, sizeof(tmp_line_width));
  if (raw_line_width != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapRender::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapRender::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapRender::GetClassData() const { return &_class_data_; }


void MapRender::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapRender*>(&to_msg);
  auto& from = static_cast<const MapRender&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_render.MapRender)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.color_palette_.MergeFrom(from._impl_.color_palette_);
  if (from._internal_has_screen()) {
    _this->_internal_mutable_screen()->::proto_render::Screen::MergeFrom(
        from._internal_screen());
  }
  if (from._internal_has_bus()) {
    _this->_internal_mutable_bus()->::proto_render::Label::MergeFrom(
        from._internal_bus());
  }
  if (from._internal_has_stop()) {
    _this->_internal_mutable_stop()->::proto_render::Label::MergeFrom(
        from._internal_stop());
  }
  if (from._internal_has_background()) {
    _this->_internal_mutable_background()->::proto_render::UnderLayer::MergeFrom(
        from._internal_background());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_radius = from._internal_stop_radius();
  uint64_t raw_stop_radius;
  memcpy(&raw_stop_radius, &tmp_stop_radius, sizeof(tmp_stop_radius));
  if (raw_stop_radius != 0) {
    _this->_internal_set_stop_radius(from._internal_stop_radius());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_width = from._internal_line_width();
  uint64_t raw_line_width;
  memcpy(&raw_line_width, &tmp_line_width, sizeof(tmp_line_width));
  if (raw_line_width != 0) {
    _this->_internal_set_line_width(from._internal_line_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapRender::CopyFrom(const MapRender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_render.MapRender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRender::IsInitialized() const {
  return true;
}

void MapRender::InternalSwap(MapRender* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.color_palette_.InternalSwap(&other->_impl_.color_palette_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapRender, _impl_.line_width_)
      + sizeof(MapRender::_impl_.line_width_)
      - PROTOBUF_FIELD_OFFSET(MapRender, _impl_.screen_)>(
          reinterpret_cast<char*>(&_impl_.screen_),
          reinterpret_cast<char*>(&other->_impl_.screen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRender::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_map_5frender_2eproto_getter, &descriptor_table_map_5frender_2eproto_once,
      file_level_metadata_map_5frender_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_render
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_render::Label*
Arena::CreateMaybeMessage< ::proto_render::Label >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_render::Label >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_render::Screen*
Arena::CreateMaybeMessage< ::proto_render::Screen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_render::Screen >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_render::UnderLayer*
Arena::CreateMaybeMessage< ::proto_render::UnderLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_render::UnderLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_render::MapRender*
Arena::CreateMaybeMessage< ::proto_render::MapRender >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_render::MapRender >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
