// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_render.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_5frender_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_5frender_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "svg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_5frender_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_5frender_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5frender_2eproto;
namespace proto_render {
class Label;
struct LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class MapRender;
struct MapRenderDefaultTypeInternal;
extern MapRenderDefaultTypeInternal _MapRender_default_instance_;
class Screen;
struct ScreenDefaultTypeInternal;
extern ScreenDefaultTypeInternal _Screen_default_instance_;
class UnderLayer;
struct UnderLayerDefaultTypeInternal;
extern UnderLayerDefaultTypeInternal _UnderLayer_default_instance_;
}  // namespace proto_render
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_render::Label* Arena::CreateMaybeMessage<::proto_render::Label>(Arena*);
template<> ::proto_render::MapRender* Arena::CreateMaybeMessage<::proto_render::MapRender>(Arena*);
template<> ::proto_render::Screen* Arena::CreateMaybeMessage<::proto_render::Screen>(Arena*);
template<> ::proto_render::UnderLayer* Arena::CreateMaybeMessage<::proto_render::UnderLayer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_render {

// ===================================================================

class Label final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_render.Label) */ {
 public:
  inline Label() : Label(nullptr) {}
  ~Label() override;
  explicit PROTOBUF_CONSTEXPR Label(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Label(const Label& from);
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Label& default_instance() {
    return *internal_default_instance();
  }
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }
  inline void Swap(Label* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Label& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Label& from) {
    Label::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_render.Label";
  }
  protected:
  explicit Label(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 2,
    kFontSizeFieldNumber = 1,
  };
  // .proto_render.Point offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::proto_render::Point& offset() const;
  PROTOBUF_NODISCARD ::proto_render::Point* release_offset();
  ::proto_render::Point* mutable_offset();
  void set_allocated_offset(::proto_render::Point* offset);
  private:
  const ::proto_render::Point& _internal_offset() const;
  ::proto_render::Point* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::proto_render::Point* offset);
  ::proto_render::Point* unsafe_arena_release_offset();

  // uint32 font_size = 1;
  void clear_font_size();
  uint32_t font_size() const;
  void set_font_size(uint32_t value);
  private:
  uint32_t _internal_font_size() const;
  void _internal_set_font_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_render.Label)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto_render::Point* offset_;
    uint32_t font_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_map_5frender_2eproto;
};
// -------------------------------------------------------------------

class Screen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_render.Screen) */ {
 public:
  inline Screen() : Screen(nullptr) {}
  ~Screen() override;
  explicit PROTOBUF_CONSTEXPR Screen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Screen(const Screen& from);
  Screen(Screen&& from) noexcept
    : Screen() {
    *this = ::std::move(from);
  }

  inline Screen& operator=(const Screen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Screen& operator=(Screen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Screen& default_instance() {
    return *internal_default_instance();
  }
  static inline const Screen* internal_default_instance() {
    return reinterpret_cast<const Screen*>(
               &_Screen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Screen& a, Screen& b) {
    a.Swap(&b);
  }
  inline void Swap(Screen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Screen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Screen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Screen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Screen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Screen& from) {
    Screen::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Screen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_render.Screen";
  }
  protected:
  explicit Screen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kPaddingFieldNumber = 3,
  };
  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 2;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double padding = 3;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto_render.Screen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double width_;
    double height_;
    double padding_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_map_5frender_2eproto;
};
// -------------------------------------------------------------------

class UnderLayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_render.UnderLayer) */ {
 public:
  inline UnderLayer() : UnderLayer(nullptr) {}
  ~UnderLayer() override;
  explicit PROTOBUF_CONSTEXPR UnderLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnderLayer(const UnderLayer& from);
  UnderLayer(UnderLayer&& from) noexcept
    : UnderLayer() {
    *this = ::std::move(from);
  }

  inline UnderLayer& operator=(const UnderLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnderLayer& operator=(UnderLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnderLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnderLayer* internal_default_instance() {
    return reinterpret_cast<const UnderLayer*>(
               &_UnderLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnderLayer& a, UnderLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(UnderLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnderLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnderLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnderLayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnderLayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnderLayer& from) {
    UnderLayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnderLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_render.UnderLayer";
  }
  protected:
  explicit UnderLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
    kWidthFieldNumber = 2,
  };
  // .proto_render.Color color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto_render::Color& color() const;
  PROTOBUF_NODISCARD ::proto_render::Color* release_color();
  ::proto_render::Color* mutable_color();
  void set_allocated_color(::proto_render::Color* color);
  private:
  const ::proto_render::Color& _internal_color() const;
  ::proto_render::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto_render::Color* color);
  ::proto_render::Color* unsafe_arena_release_color();

  // double width = 2;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto_render.UnderLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto_render::Color* color_;
    double width_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_map_5frender_2eproto;
};
// -------------------------------------------------------------------

class MapRender final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_render.MapRender) */ {
 public:
  inline MapRender() : MapRender(nullptr) {}
  ~MapRender() override;
  explicit PROTOBUF_CONSTEXPR MapRender(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapRender(const MapRender& from);
  MapRender(MapRender&& from) noexcept
    : MapRender() {
    *this = ::std::move(from);
  }

  inline MapRender& operator=(const MapRender& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapRender& operator=(MapRender&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapRender& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapRender* internal_default_instance() {
    return reinterpret_cast<const MapRender*>(
               &_MapRender_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MapRender& a, MapRender& b) {
    a.Swap(&b);
  }
  inline void Swap(MapRender* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapRender* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapRender* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapRender>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapRender& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapRender& from) {
    MapRender::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapRender* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_render.MapRender";
  }
  protected:
  explicit MapRender(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorPaletteFieldNumber = 7,
    kScreenFieldNumber = 1,
    kBusFieldNumber = 4,
    kStopFieldNumber = 5,
    kBackgroundFieldNumber = 6,
    kStopRadiusFieldNumber = 2,
    kLineWidthFieldNumber = 3,
  };
  // repeated .proto_render.Color color_palette = 7;
  int color_palette_size() const;
  private:
  int _internal_color_palette_size() const;
  public:
  void clear_color_palette();
  ::proto_render::Color* mutable_color_palette(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_render::Color >*
      mutable_color_palette();
  private:
  const ::proto_render::Color& _internal_color_palette(int index) const;
  ::proto_render::Color* _internal_add_color_palette();
  public:
  const ::proto_render::Color& color_palette(int index) const;
  ::proto_render::Color* add_color_palette();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_render::Color >&
      color_palette() const;

  // .proto_render.Screen screen = 1;
  bool has_screen() const;
  private:
  bool _internal_has_screen() const;
  public:
  void clear_screen();
  const ::proto_render::Screen& screen() const;
  PROTOBUF_NODISCARD ::proto_render::Screen* release_screen();
  ::proto_render::Screen* mutable_screen();
  void set_allocated_screen(::proto_render::Screen* screen);
  private:
  const ::proto_render::Screen& _internal_screen() const;
  ::proto_render::Screen* _internal_mutable_screen();
  public:
  void unsafe_arena_set_allocated_screen(
      ::proto_render::Screen* screen);
  ::proto_render::Screen* unsafe_arena_release_screen();

  // .proto_render.Label bus = 4;
  bool has_bus() const;
  private:
  bool _internal_has_bus() const;
  public:
  void clear_bus();
  const ::proto_render::Label& bus() const;
  PROTOBUF_NODISCARD ::proto_render::Label* release_bus();
  ::proto_render::Label* mutable_bus();
  void set_allocated_bus(::proto_render::Label* bus);
  private:
  const ::proto_render::Label& _internal_bus() const;
  ::proto_render::Label* _internal_mutable_bus();
  public:
  void unsafe_arena_set_allocated_bus(
      ::proto_render::Label* bus);
  ::proto_render::Label* unsafe_arena_release_bus();

  // .proto_render.Label stop = 5;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;
  public:
  void clear_stop();
  const ::proto_render::Label& stop() const;
  PROTOBUF_NODISCARD ::proto_render::Label* release_stop();
  ::proto_render::Label* mutable_stop();
  void set_allocated_stop(::proto_render::Label* stop);
  private:
  const ::proto_render::Label& _internal_stop() const;
  ::proto_render::Label* _internal_mutable_stop();
  public:
  void unsafe_arena_set_allocated_stop(
      ::proto_render::Label* stop);
  ::proto_render::Label* unsafe_arena_release_stop();

  // .proto_render.UnderLayer background = 6;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  const ::proto_render::UnderLayer& background() const;
  PROTOBUF_NODISCARD ::proto_render::UnderLayer* release_background();
  ::proto_render::UnderLayer* mutable_background();
  void set_allocated_background(::proto_render::UnderLayer* background);
  private:
  const ::proto_render::UnderLayer& _internal_background() const;
  ::proto_render::UnderLayer* _internal_mutable_background();
  public:
  void unsafe_arena_set_allocated_background(
      ::proto_render::UnderLayer* background);
  ::proto_render::UnderLayer* unsafe_arena_release_background();

  // double stop_radius = 2;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // double line_width = 3;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto_render.MapRender)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_render::Color > color_palette_;
    ::proto_render::Screen* screen_;
    ::proto_render::Label* bus_;
    ::proto_render::Label* stop_;
    ::proto_render::UnderLayer* background_;
    double stop_radius_;
    double line_width_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_map_5frender_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Label

// uint32 font_size = 1;
inline void Label::clear_font_size() {
  _impl_.font_size_ = 0u;
}
inline uint32_t Label::_internal_font_size() const {
  return _impl_.font_size_;
}
inline uint32_t Label::font_size() const {
  // @@protoc_insertion_point(field_get:proto_render.Label.font_size)
  return _internal_font_size();
}
inline void Label::_internal_set_font_size(uint32_t value) {
  
  _impl_.font_size_ = value;
}
inline void Label::set_font_size(uint32_t value) {
  _internal_set_font_size(value);
  // @@protoc_insertion_point(field_set:proto_render.Label.font_size)
}

// .proto_render.Point offset = 2;
inline bool Label::_internal_has_offset() const {
  return this != internal_default_instance() && _impl_.offset_ != nullptr;
}
inline bool Label::has_offset() const {
  return _internal_has_offset();
}
inline const ::proto_render::Point& Label::_internal_offset() const {
  const ::proto_render::Point* p = _impl_.offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_render::Point&>(
      ::proto_render::_Point_default_instance_);
}
inline const ::proto_render::Point& Label::offset() const {
  // @@protoc_insertion_point(field_get:proto_render.Label.offset)
  return _internal_offset();
}
inline void Label::unsafe_arena_set_allocated_offset(
    ::proto_render::Point* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  _impl_.offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_render.Label.offset)
}
inline ::proto_render::Point* Label::release_offset() {
  
  ::proto_render::Point* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_render::Point* Label::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:proto_render.Label.offset)
  
  ::proto_render::Point* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
  return temp;
}
inline ::proto_render::Point* Label::_internal_mutable_offset() {
  
  if (_impl_.offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_render::Point>(GetArenaForAllocation());
    _impl_.offset_ = p;
  }
  return _impl_.offset_;
}
inline ::proto_render::Point* Label::mutable_offset() {
  ::proto_render::Point* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:proto_render.Label.offset)
  return _msg;
}
inline void Label::set_allocated_offset(::proto_render::Point* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:proto_render.Label.offset)
}

// -------------------------------------------------------------------

// Screen

// double width = 1;
inline void Screen::clear_width() {
  _impl_.width_ = 0;
}
inline double Screen::_internal_width() const {
  return _impl_.width_;
}
inline double Screen::width() const {
  // @@protoc_insertion_point(field_get:proto_render.Screen.width)
  return _internal_width();
}
inline void Screen::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void Screen::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:proto_render.Screen.width)
}

// double height = 2;
inline void Screen::clear_height() {
  _impl_.height_ = 0;
}
inline double Screen::_internal_height() const {
  return _impl_.height_;
}
inline double Screen::height() const {
  // @@protoc_insertion_point(field_get:proto_render.Screen.height)
  return _internal_height();
}
inline void Screen::_internal_set_height(double value) {
  
  _impl_.height_ = value;
}
inline void Screen::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:proto_render.Screen.height)
}

// double padding = 3;
inline void Screen::clear_padding() {
  _impl_.padding_ = 0;
}
inline double Screen::_internal_padding() const {
  return _impl_.padding_;
}
inline double Screen::padding() const {
  // @@protoc_insertion_point(field_get:proto_render.Screen.padding)
  return _internal_padding();
}
inline void Screen::_internal_set_padding(double value) {
  
  _impl_.padding_ = value;
}
inline void Screen::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:proto_render.Screen.padding)
}

// -------------------------------------------------------------------

// UnderLayer

// .proto_render.Color color = 1;
inline bool UnderLayer::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool UnderLayer::has_color() const {
  return _internal_has_color();
}
inline const ::proto_render::Color& UnderLayer::_internal_color() const {
  const ::proto_render::Color* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_render::Color&>(
      ::proto_render::_Color_default_instance_);
}
inline const ::proto_render::Color& UnderLayer::color() const {
  // @@protoc_insertion_point(field_get:proto_render.UnderLayer.color)
  return _internal_color();
}
inline void UnderLayer::unsafe_arena_set_allocated_color(
    ::proto_render::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_render.UnderLayer.color)
}
inline ::proto_render::Color* UnderLayer::release_color() {
  
  ::proto_render::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_render::Color* UnderLayer::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:proto_render.UnderLayer.color)
  
  ::proto_render::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::proto_render::Color* UnderLayer::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_render::Color>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::proto_render::Color* UnderLayer::mutable_color() {
  ::proto_render::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto_render.UnderLayer.color)
  return _msg;
}
inline void UnderLayer::set_allocated_color(::proto_render::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:proto_render.UnderLayer.color)
}

// double width = 2;
inline void UnderLayer::clear_width() {
  _impl_.width_ = 0;
}
inline double UnderLayer::_internal_width() const {
  return _impl_.width_;
}
inline double UnderLayer::width() const {
  // @@protoc_insertion_point(field_get:proto_render.UnderLayer.width)
  return _internal_width();
}
inline void UnderLayer::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void UnderLayer::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:proto_render.UnderLayer.width)
}

// -------------------------------------------------------------------

// MapRender

// .proto_render.Screen screen = 1;
inline bool MapRender::_internal_has_screen() const {
  return this != internal_default_instance() && _impl_.screen_ != nullptr;
}
inline bool MapRender::has_screen() const {
  return _internal_has_screen();
}
inline void MapRender::clear_screen() {
  if (GetArenaForAllocation() == nullptr && _impl_.screen_ != nullptr) {
    delete _impl_.screen_;
  }
  _impl_.screen_ = nullptr;
}
inline const ::proto_render::Screen& MapRender::_internal_screen() const {
  const ::proto_render::Screen* p = _impl_.screen_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_render::Screen&>(
      ::proto_render::_Screen_default_instance_);
}
inline const ::proto_render::Screen& MapRender::screen() const {
  // @@protoc_insertion_point(field_get:proto_render.MapRender.screen)
  return _internal_screen();
}
inline void MapRender::unsafe_arena_set_allocated_screen(
    ::proto_render::Screen* screen) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.screen_);
  }
  _impl_.screen_ = screen;
  if (screen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_render.MapRender.screen)
}
inline ::proto_render::Screen* MapRender::release_screen() {
  
  ::proto_render::Screen* temp = _impl_.screen_;
  _impl_.screen_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_render::Screen* MapRender::unsafe_arena_release_screen() {
  // @@protoc_insertion_point(field_release:proto_render.MapRender.screen)
  
  ::proto_render::Screen* temp = _impl_.screen_;
  _impl_.screen_ = nullptr;
  return temp;
}
inline ::proto_render::Screen* MapRender::_internal_mutable_screen() {
  
  if (_impl_.screen_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_render::Screen>(GetArenaForAllocation());
    _impl_.screen_ = p;
  }
  return _impl_.screen_;
}
inline ::proto_render::Screen* MapRender::mutable_screen() {
  ::proto_render::Screen* _msg = _internal_mutable_screen();
  // @@protoc_insertion_point(field_mutable:proto_render.MapRender.screen)
  return _msg;
}
inline void MapRender::set_allocated_screen(::proto_render::Screen* screen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.screen_;
  }
  if (screen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(screen);
    if (message_arena != submessage_arena) {
      screen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.screen_ = screen;
  // @@protoc_insertion_point(field_set_allocated:proto_render.MapRender.screen)
}

// double stop_radius = 2;
inline void MapRender::clear_stop_radius() {
  _impl_.stop_radius_ = 0;
}
inline double MapRender::_internal_stop_radius() const {
  return _impl_.stop_radius_;
}
inline double MapRender::stop_radius() const {
  // @@protoc_insertion_point(field_get:proto_render.MapRender.stop_radius)
  return _internal_stop_radius();
}
inline void MapRender::_internal_set_stop_radius(double value) {
  
  _impl_.stop_radius_ = value;
}
inline void MapRender::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:proto_render.MapRender.stop_radius)
}

// double line_width = 3;
inline void MapRender::clear_line_width() {
  _impl_.line_width_ = 0;
}
inline double MapRender::_internal_line_width() const {
  return _impl_.line_width_;
}
inline double MapRender::line_width() const {
  // @@protoc_insertion_point(field_get:proto_render.MapRender.line_width)
  return _internal_line_width();
}
inline void MapRender::_internal_set_line_width(double value) {
  
  _impl_.line_width_ = value;
}
inline void MapRender::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:proto_render.MapRender.line_width)
}

// .proto_render.Label bus = 4;
inline bool MapRender::_internal_has_bus() const {
  return this != internal_default_instance() && _impl_.bus_ != nullptr;
}
inline bool MapRender::has_bus() const {
  return _internal_has_bus();
}
inline void MapRender::clear_bus() {
  if (GetArenaForAllocation() == nullptr && _impl_.bus_ != nullptr) {
    delete _impl_.bus_;
  }
  _impl_.bus_ = nullptr;
}
inline const ::proto_render::Label& MapRender::_internal_bus() const {
  const ::proto_render::Label* p = _impl_.bus_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_render::Label&>(
      ::proto_render::_Label_default_instance_);
}
inline const ::proto_render::Label& MapRender::bus() const {
  // @@protoc_insertion_point(field_get:proto_render.MapRender.bus)
  return _internal_bus();
}
inline void MapRender::unsafe_arena_set_allocated_bus(
    ::proto_render::Label* bus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bus_);
  }
  _impl_.bus_ = bus;
  if (bus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_render.MapRender.bus)
}
inline ::proto_render::Label* MapRender::release_bus() {
  
  ::proto_render::Label* temp = _impl_.bus_;
  _impl_.bus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_render::Label* MapRender::unsafe_arena_release_bus() {
  // @@protoc_insertion_point(field_release:proto_render.MapRender.bus)
  
  ::proto_render::Label* temp = _impl_.bus_;
  _impl_.bus_ = nullptr;
  return temp;
}
inline ::proto_render::Label* MapRender::_internal_mutable_bus() {
  
  if (_impl_.bus_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_render::Label>(GetArenaForAllocation());
    _impl_.bus_ = p;
  }
  return _impl_.bus_;
}
inline ::proto_render::Label* MapRender::mutable_bus() {
  ::proto_render::Label* _msg = _internal_mutable_bus();
  // @@protoc_insertion_point(field_mutable:proto_render.MapRender.bus)
  return _msg;
}
inline void MapRender::set_allocated_bus(::proto_render::Label* bus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bus_;
  }
  if (bus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bus);
    if (message_arena != submessage_arena) {
      bus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bus_ = bus;
  // @@protoc_insertion_point(field_set_allocated:proto_render.MapRender.bus)
}

// .proto_render.Label stop = 5;
inline bool MapRender::_internal_has_stop() const {
  return this != internal_default_instance() && _impl_.stop_ != nullptr;
}
inline bool MapRender::has_stop() const {
  return _internal_has_stop();
}
inline void MapRender::clear_stop() {
  if (GetArenaForAllocation() == nullptr && _impl_.stop_ != nullptr) {
    delete _impl_.stop_;
  }
  _impl_.stop_ = nullptr;
}
inline const ::proto_render::Label& MapRender::_internal_stop() const {
  const ::proto_render::Label* p = _impl_.stop_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_render::Label&>(
      ::proto_render::_Label_default_instance_);
}
inline const ::proto_render::Label& MapRender::stop() const {
  // @@protoc_insertion_point(field_get:proto_render.MapRender.stop)
  return _internal_stop();
}
inline void MapRender::unsafe_arena_set_allocated_stop(
    ::proto_render::Label* stop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_);
  }
  _impl_.stop_ = stop;
  if (stop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_render.MapRender.stop)
}
inline ::proto_render::Label* MapRender::release_stop() {
  
  ::proto_render::Label* temp = _impl_.stop_;
  _impl_.stop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_render::Label* MapRender::unsafe_arena_release_stop() {
  // @@protoc_insertion_point(field_release:proto_render.MapRender.stop)
  
  ::proto_render::Label* temp = _impl_.stop_;
  _impl_.stop_ = nullptr;
  return temp;
}
inline ::proto_render::Label* MapRender::_internal_mutable_stop() {
  
  if (_impl_.stop_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_render::Label>(GetArenaForAllocation());
    _impl_.stop_ = p;
  }
  return _impl_.stop_;
}
inline ::proto_render::Label* MapRender::mutable_stop() {
  ::proto_render::Label* _msg = _internal_mutable_stop();
  // @@protoc_insertion_point(field_mutable:proto_render.MapRender.stop)
  return _msg;
}
inline void MapRender::set_allocated_stop(::proto_render::Label* stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stop_;
  }
  if (stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop);
    if (message_arena != submessage_arena) {
      stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stop_ = stop;
  // @@protoc_insertion_point(field_set_allocated:proto_render.MapRender.stop)
}

// .proto_render.UnderLayer background = 6;
inline bool MapRender::_internal_has_background() const {
  return this != internal_default_instance() && _impl_.background_ != nullptr;
}
inline bool MapRender::has_background() const {
  return _internal_has_background();
}
inline void MapRender::clear_background() {
  if (GetArenaForAllocation() == nullptr && _impl_.background_ != nullptr) {
    delete _impl_.background_;
  }
  _impl_.background_ = nullptr;
}
inline const ::proto_render::UnderLayer& MapRender::_internal_background() const {
  const ::proto_render::UnderLayer* p = _impl_.background_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_render::UnderLayer&>(
      ::proto_render::_UnderLayer_default_instance_);
}
inline const ::proto_render::UnderLayer& MapRender::background() const {
  // @@protoc_insertion_point(field_get:proto_render.MapRender.background)
  return _internal_background();
}
inline void MapRender::unsafe_arena_set_allocated_background(
    ::proto_render::UnderLayer* background) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.background_);
  }
  _impl_.background_ = background;
  if (background) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_render.MapRender.background)
}
inline ::proto_render::UnderLayer* MapRender::release_background() {
  
  ::proto_render::UnderLayer* temp = _impl_.background_;
  _impl_.background_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_render::UnderLayer* MapRender::unsafe_arena_release_background() {
  // @@protoc_insertion_point(field_release:proto_render.MapRender.background)
  
  ::proto_render::UnderLayer* temp = _impl_.background_;
  _impl_.background_ = nullptr;
  return temp;
}
inline ::proto_render::UnderLayer* MapRender::_internal_mutable_background() {
  
  if (_impl_.background_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_render::UnderLayer>(GetArenaForAllocation());
    _impl_.background_ = p;
  }
  return _impl_.background_;
}
inline ::proto_render::UnderLayer* MapRender::mutable_background() {
  ::proto_render::UnderLayer* _msg = _internal_mutable_background();
  // @@protoc_insertion_point(field_mutable:proto_render.MapRender.background)
  return _msg;
}
inline void MapRender::set_allocated_background(::proto_render::UnderLayer* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.background_;
  }
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(background);
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.background_ = background;
  // @@protoc_insertion_point(field_set_allocated:proto_render.MapRender.background)
}

// repeated .proto_render.Color color_palette = 7;
inline int MapRender::_internal_color_palette_size() const {
  return _impl_.color_palette_.size();
}
inline int MapRender::color_palette_size() const {
  return _internal_color_palette_size();
}
inline ::proto_render::Color* MapRender::mutable_color_palette(int index) {
  // @@protoc_insertion_point(field_mutable:proto_render.MapRender.color_palette)
  return _impl_.color_palette_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_render::Color >*
MapRender::mutable_color_palette() {
  // @@protoc_insertion_point(field_mutable_list:proto_render.MapRender.color_palette)
  return &_impl_.color_palette_;
}
inline const ::proto_render::Color& MapRender::_internal_color_palette(int index) const {
  return _impl_.color_palette_.Get(index);
}
inline const ::proto_render::Color& MapRender::color_palette(int index) const {
  // @@protoc_insertion_point(field_get:proto_render.MapRender.color_palette)
  return _internal_color_palette(index);
}
inline ::proto_render::Color* MapRender::_internal_add_color_palette() {
  return _impl_.color_palette_.Add();
}
inline ::proto_render::Color* MapRender::add_color_palette() {
  ::proto_render::Color* _add = _internal_add_color_palette();
  // @@protoc_insertion_point(field_add:proto_render.MapRender.color_palette)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_render::Color >&
MapRender::color_palette() const {
  // @@protoc_insertion_point(field_list:proto_render.MapRender.color_palette)
  return _impl_.color_palette_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_render

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_5frender_2eproto
